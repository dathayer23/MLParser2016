namespace MlParser2016
module MlParser =
// Signature file for parser generated by fsyacc
type token = 
  | EOF
  | HELLO
  | SINGLE_QUOTE
  | BACKSLASH
  | DBL_QUOTE
  | DOT
  | ARROW
  | STAR
  | ELLIPSIS
  | UNDERLINE
  | HASH
  | COMMA
  | BAR
  | RIGHT_BRACE
  | LEFT_BRACE
  | RIGHT_BRACKET
  | LEFT_BRACKET
  | RIGHT_PAREN
  | LEFT_PAREN
  | DBLARROR
  | COLON
  | SEMICOLON
  | EQ
  | TYPEVAR of (string)
  | FLOAT of (string)
  | HEX of (string)
  | INT of (string)
  | SYMB_ID of (string)
  | ID of (string)
  | END
  | OP
  | IN
  | AND
  | AS
  | OF
  | FN
  | CASE
  | DO
  | WHILE
  | ELSE
  | THEN
  | IF
  | LET
  | REC
  | FUN
  | RAISE
  | HANDLE
  | ORELSE
  | ANDALSO
  | WITH
  | EXCEPTION
  | INCLUDE
  | SHARING
  | DATATYPE
  | WITHTYPE
  | ABSTYPE
  | EQTYPE
  | VAL
  | TYPE
  | WHERE
  | NONFIX
  | INFIXR
  | INFIX
  | SIG
  | STRUCT
  | FUNCTOR
  | SIGNATURE
  | OPEN
  | LOCAL
  | STRUCTURE
type tokenId = 
    | TOKEN_EOF
    | TOKEN_HELLO
    | TOKEN_SINGLE_QUOTE
    | TOKEN_BACKSLASH
    | TOKEN_DBL_QUOTE
    | TOKEN_DOT
    | TOKEN_ARROW
    | TOKEN_STAR
    | TOKEN_ELLIPSIS
    | TOKEN_UNDERLINE
    | TOKEN_HASH
    | TOKEN_COMMA
    | TOKEN_BAR
    | TOKEN_RIGHT_BRACE
    | TOKEN_LEFT_BRACE
    | TOKEN_RIGHT_BRACKET
    | TOKEN_LEFT_BRACKET
    | TOKEN_RIGHT_PAREN
    | TOKEN_LEFT_PAREN
    | TOKEN_DBLARROR
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_EQ
    | TOKEN_TYPEVAR
    | TOKEN_FLOAT
    | TOKEN_HEX
    | TOKEN_INT
    | TOKEN_SYMB_ID
    | TOKEN_ID
    | TOKEN_END
    | TOKEN_OP
    | TOKEN_IN
    | TOKEN_AND
    | TOKEN_AS
    | TOKEN_OF
    | TOKEN_FN
    | TOKEN_CASE
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_LET
    | TOKEN_REC
    | TOKEN_FUN
    | TOKEN_RAISE
    | TOKEN_HANDLE
    | TOKEN_ORELSE
    | TOKEN_ANDALSO
    | TOKEN_WITH
    | TOKEN_EXCEPTION
    | TOKEN_INCLUDE
    | TOKEN_SHARING
    | TOKEN_DATATYPE
    | TOKEN_WITHTYPE
    | TOKEN_ABSTYPE
    | TOKEN_EQTYPE
    | TOKEN_VAL
    | TOKEN_TYPE
    | TOKEN_WHERE
    | TOKEN_NONFIX
    | TOKEN_INFIXR
    | TOKEN_INFIX
    | TOKEN_SIG
    | TOKEN_STRUCT
    | TOKEN_FUNCTOR
    | TOKEN_SIGNATURE
    | TOKEN_OPEN
    | TOKEN_LOCAL
    | TOKEN_STRUCTURE
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_File
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (MLAst.program) 
